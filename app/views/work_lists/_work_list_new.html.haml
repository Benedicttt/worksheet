%article
  - if current_user.present?
    - days = Time.days_in_month(params[:month].to_i, params[:year].to_i)
    - current_day = Time.now.day

    = render "shared/flash"

    %section.position_relative.display-inline-block
      .tbl-header
        %table.table{:border => "0", :cellpadding => "0", :cellspacing => "0"}
          %thead
            %tr
              %td.text-center.width50  Day
              %td.text-center.width65  Work start
              -#%td.text-center.width65  Break start
              -#%td.text-center.width65  Break stop
              %td.text-center.width65  Work stop
              %td.text-center.width65  Washing time
              %td.text-center.width40  Free day
              %td.text-center.width40  Vacation day
              %td.text-center.width65  Common hours
              %td.text-center.width125 Comment
              %td.text-center.width125
                = link_to "", work_lists_show_pdf_path(month: params[:month], year: params[:year], user_id: params[:user_id], format: "pdf"), class: 'btn icon-pdf', target: "_blank"
                = link_to "", work_lists_show_excel_path(month: params[:month], year: params[:year], user_id: params[:user_id], format: :xlsx), class: 'btn icon-excel'


      .tbl-content-form
        - if !params[:day].blank? || !params[:day].nil?
          :javascript
            $(document).ready(function(){
              document.querySelectorAll(".tr_#{params[:day]}")[0].scrollIntoView({
                behavior: 'auto',
                block: 'center',
                inline: "nearest"
              }) ;

              $(".tr_#{params[:day]}").css('background-color', '#a7b5a1');
              console.log("1")

            })


        - days.times do |index|
          - day = index + 1

          = form_for "", remote: true, url: work_lists_create_path(day: day) do |f|
            %table.table.container
              %tbody
                - wl = WorkList.find_by(day: index + 1, month: params[:month], years: params[:year], user_id: params[:user_id])
                - washing_time     = wl.nil? ? "" : wl.washing_time
                - work_start_hour  = wl.nil? ? "" : wl.work_start
                - work_stop_hour   = wl.nil? ? "" : wl.work_stop
                - break_start_hour = wl.nil? ? "" : wl.break_start
                - break_stop_hour  = wl.nil? ? "" : wl.break_stop
                - common_hours     = wl.nil? ? "" : wl.hours
                - free_day         = wl.nil? ? false : wl.free_day
                - vacation         = wl.nil? ? false : wl.vacation

                - wss              = WorkShiftSchedule.find_by(user_id: params[:user_id])
                - if !wss.nil?
                  - period           = Period.find_by(id: WorkShiftSchedule.find_by(user_id: params[:user_id]).period_id, month: params[:month], year: params[:year])
                  - wss_comment      = period.nil? ? nil : period.work_shift_schedules[0]

                - comment = ""
                - if !wss_comment.nil?
                  - day_from_wss     = JSON.parse(wss_comment.work_shift_schedule_day.to_json, symbolize_names: true).tap { |hs| hs.delete(:work_shift_schedule_id) &&  hs.delete(:id) }

                  - comment = ""
                  - day_from_wss.each { |k, v| (v == day && v != nil) ? comment = k.to_s.sub("_number_day", "")  : "" }
                  - comment = wl.nil? ?  wss_comment[comment]  : wl.comment
                - else
                  - comment = wl.nil? ?  ""  : wl.comment

                - condition_disabled = !work_start_hour.blank? || !work_stop_hour.blank? || !break_start_hour.blank? || !break_stop_hour.blank? || !common_hours.blank? || !comment.blank? ? true : false
                = f.hidden_field :day, value: index + 1
                = f.hidden_field :month, value: params[:month]
                = f.hidden_field :break_start, value: break_start_hour, :format=>"%H:%M"
                = f.hidden_field :break_stop, value: break_stop_hour, :format=>"%H:%M"
                = f.hidden_field :year, value: params[:year]
                = f.hidden_field :user_id, value: params[:user_id].nil? ? current_user.id : params[:user_id]

                %tr{ class: "tr_#{index + 1}"}
                  %td.text-center.width50.font-size-12{style: "color: brown;"}
                    = "#{index + 1} - #{DateTime.new(params[:year].to_i, params[:month].to_i, day).strftime("%A")}"
                  %td.text-center.width65
                    = f.time_field :work_start, :format=>"%H:%M", value: work_start_hour, class: "work_start_#{day} border-radius-15px width65 " + (condition_disabled ? "opacity_05" : ""), onchange: "some_#{day}()"
                  -#%td.text-center.width65
                  -#  = f.time_field :break_start, :format=>"%H:%M", value: break_start_hour, class: "break_start_#{day} border-radius-15px width65 " + (condition_disabled ? "opacity_05" : "")
                  -#%td.text-center.width65
                  -#  = f.time_field :break_stop, :format=>"%H:%M", value: break_stop_hour, class: "break_stop_#{day} border-radius-15px width65 " + (condition_disabled ? "opacity_05" : "")
                  %td.text-center.width65
                    = f.time_field :work_stop, :format=>"%H:%M", value: work_stop_hour, class: "work_stop_#{day} border-radius-15px width65 " + (condition_disabled ? "opacity_05" : ""), onchange: "some_#{day}()"
                  %td.text-center.width65
                    = f.time_field :washing_time, :format=>"%H:%M", value: washing_time, class: "washing_time_#{day} border-radius-15px width65 " + (condition_disabled ? "opacity_05" : ""), onchange: "some_#{day}()"
                  %td.text-center.width40
                    .form-check.form-switch
                      = f.check_box :free_day, checked: free_day, class: "free_day_#{day} form-check-input " + (condition_disabled ? "opacity_05" : "") , type: 'checkbox', id: 'flexSwitchCheckDefault'
                  %td.text-center.width40
                    .form-check.form-switch
                      = f.check_box :vacation, checked: vacation, class: "vacation_#{day} form-check-input " + (condition_disabled ? "opacity_05" : ""), type: 'checkbox', id: 'flexSwitchCheckDefault'

                  %td.text-center.width65
                    = f.time_field :common_hours, :format=>"%H:%M", value: common_hours, class: "common_hours_#{day} border-radius-15px width65 " + (condition_disabled ? "opacity_05" : ""), onfocus: "some_#{day}()"
                  %td.text-center.width125
                    = f.text_area :comment, value: comment, class: "comment_#{day} border-radius-15px width200  " + (condition_disabled  ? "opacity_05" : ""), placeholder: "Comment", onfocus: "some_#{day}()"
                    - if condition_disabled
                      :javascript
                        $(".work_start_#{day}").css("pointer-events", "none")
                        $(".work_stop_#{day}").css("pointer-events", "none")
                        $(".washing_time_#{day}").css("pointer-events", "none")
                        $(".common_hours_#{day}").css("pointer-events", "none")
                        $(".vacation_#{day}").css("pointer-events", "none")
                        $(".free_day_#{day}").css("pointer-events", "none")
                        $(".comment_#{day}").css("pointer-events", "none")

                    :javascript
                      function some_#{day}() {
                        $(".common_hours_#{day}").val(
                          recanculateTime($(".work_stop_#{day}").val(), $(".work_start_#{day}").val())
                        )
                      }

                      $(".free_day_#{day}").on('change', function() {
                          $(".work_start_#{day}").val("00:00")
                          $(".work_stop_#{day}").val("00:00")
                          $(".washing_time_#{day}").val("00:00")
                          $(".common_hours_#{day}").val("00:00")
                          $(".vacation_#{day}").attr("checked", false)

                        if ($(this).is(':checked')) {
                          $(this).attr('value', '1');
                          $(".comment_#{day}").val("Free day")

                        } else {
                          $(this).attr('value', '0');
                          $(".comment_#{day}").val("")
                        }
                      })

                      $(".vacation_#{day}").on('change', function() {
                          $(".work_start_#{day}").val("00:00")
                          $(".work_stop_#{day}").val("00:00")
                          $(".washing_time_#{day}").val("00:00")
                          $(".common_hours_#{day}").val("08:00")
                          $(".free_day_#{day}").attr("checked", false)

                        if ($(this).is(':checked')) {
                          $(this).attr('value', '1');
                          $(".comment_#{day}").val("LOMA")

                        } else {
                          $(this).attr('value', '0');
                          $(".common_hours_#{day}").val("00:00")
                          $(".comment_#{day}").val("")
                        }
                      })

                  %td.text-center.width125
                    - if  condition_disabled
                      = button_tag 'Edit', type: "button", class: "btn btn-warning btn-sm width100", id: "edit_#{index + 1}"

                      :javascript
                        $(document).ready(function(){

                           $("#edit_#{index + 1}.btn-warning.btn-sm").on("click", function() {

                              $(".vacation_#{day}, .free_day_#{day}").attr("onclick", "return true")
                              $(".work_start_#{day}").css("pointer-events", "all")
                              $(".work_stop_#{day}").css("pointer-events", "all")
                              $(".washing_time_#{day}").css("pointer-events", "all")
                              $(".common_hours_#{day}").css("pointer-events", "all")
                              $(".vacation_#{day}").css("pointer-events", "all")
                              $(".free_day_#{day}").css("pointer-events", "all")
                              $(".comment_#{day}").css("pointer-events", "all")


                          if ($(this).attr('class') == 'btn width100 btn-primary btn-sm click_#{index + 1}') {
                                $(this).find("button").removeAttr('type');
                                $(this).attr('type', 'submit');

                              } else {
                                  $(".tr_#{index + 1}").each(function(index, tr) {
                                     $(tr).find("input").removeAttr('readonly').removeClass("opacity_05")
                                     $(tr).find("textarea").removeAttr('readonly').removeClass("opacity_05")
                                  })

                                 $(this).removeClass('btn-warning btn-sm')
                                 $(this).addClass('btn-primary btn-sm')
                                 $(this).addClass('width100')
                                 $(this).addClass('click_#{index + 1}')
                                 $(this).text("Update")
                               }
                             })
                          })


                    - else
                      = f.submit "Add", class: 'btn width75 btn-dark btn-sm'

              - if day == current_day
                :javascript
                  $(document).ready(function(){
                    $(".tr_#{day}").css('background-color', '#b7c6d4');
                  })
              - if DateTime.new(params[:year].to_i, params[:month].to_i, day).strftime("%A") == "Sunday"
                :javascript
                  $(document).ready(function(){
                    $(".tr_#{day}").css('background-color', '#ffbadb');
                  })

:javascript
  function timeToMins(time) {
    var b = time.split(':');
    return b[0]*60 + +b[1];
  }

  // Convert minutes to a time in format hh:mm
  // Returned value is in range 00  to 24 hrs
  function timeFromMins(mins) {
    function z(n){return (n<10? '0':'') + n;}
    var h = (mins/60 |0) % 24;
    var m = mins % 60;
    return z(h) + ':' + z(m);
  }

  // Add two times in hh:mm format
  function recanculateTime(t1, t0) {
    return timeFromMins(timeToMins(t1) - timeToMins(t0));
  }

:css
  .form-check .form-check-input {
    height: 1.2em !important;
    width: 2.8em !important;
    float: none !important;
    margin-left: -2.2em !important;
  }

  .form-check {
    min-height: 1.5rem !important;
    margin-bottom: 0.125rem !important;
  }
