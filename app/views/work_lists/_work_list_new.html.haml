%article
  - if current_user.present?
    - days = Time.days_in_month(params[:month].to_i, params[:year].to_i)
    - u = User.find(params[:user_id])
    %h1 New work list for user: #{u.first_name} #{u.last_name}, month: #{params[:month]}, year: #{params[:year]}

    = render "shared/flash"

    %section.position_relative.display-inline-block
      .tbl-header
        %table.table{:border => "0", :cellpadding => "0", :cellspacing => "0"}
          %thead
            %tr
              %th.text-center.width50  Day
              %th.text-center.width80  Work start
              %th.text-center.width80  Break start
              %th.text-center.width80  Break stop
              %th.text-center.width80  Work stop
              %th.text-center.width80  Common hours
              %th.text-center.width125 Comment
              %th.text-center.width125
                = link_to "", work_lists_show_pdf_path(month: params[:month], year: params[:year], user_id: params[:user_id], format: "pdf"), class: 'btn icon-pdf', target: "_blank"


      .tbl-content-form
        - days.times do |index|
          - day = index + 1
          = form_for "", remote: true, url: work_lists_create_path(day: day) do |f|
            %table.table
              %tbody
                - wl = WorkList.find_by(day: index + 1, month: params[:month], years: params[:year], user_id: params[:user_id])
                - work_start_hour  = wl.nil? ? "" : wl.work_start
                - work_stop_hour   = wl.nil? ? "" : wl.work_stop
                - break_start_hour = wl.nil? ? "" : wl.break_start
                - break_stop_hour  = wl.nil? ? "" : wl.break_stop
                - common_hours     = wl.nil? ? "" : wl.hours

                - wss              = WorkShiftSchedule.find_by(user_id: params[:user_id])
                - if !wss.nil?
                  - period           = Period.find_by(id: WorkShiftSchedule.find_by(user_id: params[:user_id]).period_id, month: params[:month], year: params[:year])
                  - wss_comment      = period.nil? ? nil : period.work_shift_schedules[0]

                - comment = ""
                - if !wss_comment.nil?
                  - day_from_wss     = JSON.parse(wss_comment.work_shift_schedule_day.to_json, symbolize_names: true).tap { |hs| hs.delete(:work_shift_schedule_id) &&  hs.delete(:id) }

                  - comment = ""
                  - day_from_wss.each { |k, v| (v == day && v != nil) ? comment = k.to_s.sub("_number_day", "")  : "" }
                  - comment = wl.nil? ?  wss_comment[comment]  : wl.comment
                - else
                  - comment = wl.nil? ?  ""  : wl.comment

                - condition_disabled = !work_start_hour.blank? || !work_stop_hour.blank? || !break_start_hour.blank? || !break_stop_hour.blank? || !common_hours.blank? || !comment.blank? ? true : false
                = f.hidden_field :day, value: index + 1
                = f.hidden_field :month, value: params[:month]
                = f.hidden_field :year, value: params[:year]
                = f.hidden_field :user_id, value: params[:user_id].nil? ? current_user.id : params[:user_id]

                %tr{ class: "tr_#{index + 1}"}
                  %th.text-center.width50.font-size-16
                    = index + 1
                  %th.text-center.width80
                    = f.time_field :work_start, :format=>"%H:%M", value: work_start_hour, class: "work_start_#{day} border-radius-15px width90 " + (condition_disabled ? "opacity_05" : ""),  readonly: condition_disabled, onchange: "some_#{day}()"
                  %th.text-center.width80
                    = f.time_field :break_start, :format=>"%H:%M", value: break_start_hour, class: "break_start_#{day} border-radius-15px width90 " + (condition_disabled ? "opacity_05" : ""),  readonly: condition_disabled
                  %th.text-center.width80
                    = f.time_field :break_stop, :format=>"%H:%M", value: break_stop_hour, class: "break_stop_#{day} border-radius-15px width90 " + (condition_disabled ? "opacity_05" : ""),  readonly: condition_disabled
                  %th.text-center.width80
                    = f.time_field :work_stop, :format=>"%H:%M", value: work_stop_hour, class: "work_stop_#{day} border-radius-15px width90 " + (condition_disabled ? "opacity_05" : ""),  readonly: condition_disabled, onchange: "some_#{day}()"
                  %th.text-center.width80
                    = f.time_field :common_hours, :format=>"%H:%M", value: common_hours, class: "common_hours_#{day} border-radius-15px width90 " + (condition_disabled ? "opacity_05" : ""),  readonly: condition_disabled, onfocus: "some_#{day}()"
                    :javascript
                        function some_#{day}() {
                          $(".common_hours_#{day}").val(
                            recanculateTime($(".work_stop_#{day}").val(), $(".work_start_#{day}").val())
                          )
                        }
                  %th.text-center.width125
                    = f.text_area :comment, value: comment, class: "border-radius-15px width200  " + (condition_disabled && (!wss_comment.nil? ) ? "opacity_05" : ""), placeholder: "Comment"

                  %th.text-center.width125
                    - if  condition_disabled
                      = button_tag 'EDIT', type: "button", class: "btn btn-warning width200", id: "edit_#{index + 1}"
                      :javascript
                        $(document).ready(function(){

                           $("#edit_#{index + 1}.btn-warning").on("click", function() {
                              console.log("click btn warning #edit_#{index + 1}")


                              if ($(this).attr('class') == 'btn width200 btn-primary click_#{index + 1}') {
                                $(this).find("button").removeAttr('type');
                                $(this).attr('type', 'submit');

                              } else {
                                  $(".tr_#{index + 1}").each(function(index, tr) {
                                     $(tr).find("input").removeAttr('readonly').removeClass("opacity_05")
                                     $(tr).find("textarea").removeAttr('readonly').removeClass("opacity_05")
                                  })

                                 $(this).removeClass('btn-warning')
                                 $(this).addClass('btn-primary')
                                 $(this).addClass('click_#{index + 1}')
                                 $(this).text("ADD")
                               }
                             })
                          })


                    - else
                      = f.submit "ADD", class: 'btn btn-dark'

:javascript
  function timeToMins(time) {
    var b = time.split(':');
    return b[0]*60 + +b[1];
  }

  // Convert minutes to a time in format hh:mm
  // Returned value is in range 00  to 24 hrs
  function timeFromMins(mins) {
    function z(n){return (n<10? '0':'') + n;}
    var h = (mins/60 |0) % 24;
    var m = mins % 60;
    return z(h) + ':' + z(m);
  }

  // Add two times in hh:mm format
  function recanculateTime(t1, t0) {
    return timeFromMins(timeToMins(t1) - timeToMins(t0));
  }
